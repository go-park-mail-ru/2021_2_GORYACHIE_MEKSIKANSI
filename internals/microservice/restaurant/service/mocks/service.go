// Code generated by MockGen. DO NOT EDIT.
// Source: 2021_2_GORYACHIE_MEKSIKANSI/internals/microservice/restaurant/application (interfaces: RestaurantApplicationInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	restaurantlf "2021_2_GORYACHIE_MEKSIKANSI/internals/microservice/restaurant"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRestaurantApplicationInterface is a mock of RestaurantApplicationInterface interface.
type MockRestaurantApplicationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRestaurantApplicationInterfaceMockRecorder
}

// MockRestaurantApplicationInterfaceMockRecorder is the mock recorder for MockRestaurantApplicationInterface.
type MockRestaurantApplicationInterfaceMockRecorder struct {
	mock *MockRestaurantApplicationInterface
}

// NewMockRestaurantApplicationInterface creates a new mock instance.
func NewMockRestaurantApplicationInterface(ctrl *gomock.Controller) *MockRestaurantApplicationInterface {
	mock := &MockRestaurantApplicationInterface{ctrl: ctrl}
	mock.recorder = &MockRestaurantApplicationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestaurantApplicationInterface) EXPECT() *MockRestaurantApplicationInterfaceMockRecorder {
	return m.recorder
}

// AllRestaurantsPromo mocks base method.
func (m *MockRestaurantApplicationInterface) AllRestaurantsPromo() (*restaurantlf.AllRestaurantsPromo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRestaurantsPromo")
	ret0, _ := ret[0].(*restaurantlf.AllRestaurantsPromo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRestaurantsPromo indicates an expected call of AllRestaurantsPromo.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) AllRestaurantsPromo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRestaurantsPromo", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).AllRestaurantsPromo))
}

// CreateReview mocks base method.
func (m *MockRestaurantApplicationInterface) CreateReview(arg0 int, arg1 restaurantlf.NewReview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) CreateReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).CreateReview), arg0, arg1)
}

// DeleteDish mocks base method.
func (m *MockRestaurantApplicationInterface) DeleteDish(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDish indicates an expected call of DeleteDish.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) DeleteDish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDish", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).DeleteDish), arg0)
}

// EditRestaurantInFavorite mocks base method.
func (m *MockRestaurantApplicationInterface) EditRestaurantInFavorite(arg0, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRestaurantInFavorite", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditRestaurantInFavorite indicates an expected call of EditRestaurantInFavorite.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) EditRestaurantInFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRestaurantInFavorite", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).EditRestaurantInFavorite), arg0, arg1)
}

// GetFavoriteRestaurants mocks base method.
func (m *MockRestaurantApplicationInterface) GetFavoriteRestaurants(arg0 int) ([]restaurantlf.Restaurants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteRestaurants", arg0)
	ret0, _ := ret[0].([]restaurantlf.Restaurants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteRestaurants indicates an expected call of GetFavoriteRestaurants.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) GetFavoriteRestaurants(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteRestaurants", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).GetFavoriteRestaurants), arg0)
}

// GetRestaurant mocks base method.
func (m *MockRestaurantApplicationInterface) GetRestaurant(arg0, arg1 int) (*restaurantlf.RestaurantId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurant", arg0, arg1)
	ret0, _ := ret[0].(*restaurantlf.RestaurantId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurant indicates an expected call of GetRestaurant.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) GetRestaurant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurant", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).GetRestaurant), arg0, arg1)
}

// GetReview mocks base method.
func (m *MockRestaurantApplicationInterface) GetReview(arg0, arg1 int) (*restaurantlf.ResReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", arg0, arg1)
	ret0, _ := ret[0].(*restaurantlf.ResReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) GetReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).GetReview), arg0, arg1)
}

// RecommendedRestaurants mocks base method.
func (m *MockRestaurantApplicationInterface) RecommendedRestaurants() (*restaurantlf.AllRestaurants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecommendedRestaurants")
	ret0, _ := ret[0].(*restaurantlf.AllRestaurants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecommendedRestaurants indicates an expected call of RecommendedRestaurants.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) RecommendedRestaurants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendedRestaurants", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).RecommendedRestaurants))
}

// RestaurantDishes mocks base method.
func (m *MockRestaurantApplicationInterface) RestaurantDishes(arg0, arg1 int) (*restaurantlf.Dishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestaurantDishes", arg0, arg1)
	ret0, _ := ret[0].(*restaurantlf.Dishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestaurantDishes indicates an expected call of RestaurantDishes.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) RestaurantDishes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestaurantDishes", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).RestaurantDishes), arg0, arg1)
}

// SearchRestaurant mocks base method.
func (m *MockRestaurantApplicationInterface) SearchRestaurant(arg0 string) ([]restaurantlf.Restaurants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRestaurant", arg0)
	ret0, _ := ret[0].([]restaurantlf.Restaurants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRestaurant indicates an expected call of SearchRestaurant.
func (mr *MockRestaurantApplicationInterfaceMockRecorder) SearchRestaurant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRestaurant", reflect.TypeOf((*MockRestaurantApplicationInterface)(nil).SearchRestaurant), arg0)
}
