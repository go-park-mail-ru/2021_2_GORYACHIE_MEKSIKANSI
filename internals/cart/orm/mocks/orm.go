// Code generated by MockGen. DO NOT EDIT.
// Source: 2021_2_GORYACHIE_MEKSIKANSI/internals/cart/orm (interfaces: WrapperCartServerInterface,ConnectCartServiceInterface,ConnectPromocodeServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	cart "2021_2_GORYACHIE_MEKSIKANSI/internals/cart"
	proto "2021_2_GORYACHIE_MEKSIKANSI/internals/microservice/cart/proto"
	proto0 "2021_2_GORYACHIE_MEKSIKANSI/internals/microservice/promocode/proto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockWrapperCartServerInterface is a mock of WrapperCartServerInterface interface.
type MockWrapperCartServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWrapperCartServerInterfaceMockRecorder
}

// MockWrapperCartServerInterfaceMockRecorder is the mock recorder for MockWrapperCartServerInterface.
type MockWrapperCartServerInterfaceMockRecorder struct {
	mock *MockWrapperCartServerInterface
}

// NewMockWrapperCartServerInterface creates a new mock instance.
func NewMockWrapperCartServerInterface(ctrl *gomock.Controller) *MockWrapperCartServerInterface {
	mock := &MockWrapperCartServerInterface{ctrl: ctrl}
	mock.recorder = &MockWrapperCartServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWrapperCartServerInterface) EXPECT() *MockWrapperCartServerInterfaceMockRecorder {
	return m.recorder
}

// AddPromoCode mocks base method.
func (m *MockWrapperCartServerInterface) AddPromoCode(arg0 string, arg1, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPromoCode", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPromoCode indicates an expected call of AddPromoCode.
func (mr *MockWrapperCartServerInterfaceMockRecorder) AddPromoCode(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPromoCode", reflect.TypeOf((*MockWrapperCartServerInterface)(nil).AddPromoCode), arg0, arg1, arg2)
}

// GetCart mocks base method.
func (m *MockWrapperCartServerInterface) GetCart(arg0 int) (*cart.ResponseCartErrors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", arg0)
	ret0, _ := ret[0].(*cart.ResponseCartErrors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockWrapperCartServerInterfaceMockRecorder) GetCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockWrapperCartServerInterface)(nil).GetCart), arg0)
}

// UpdateCart mocks base method.
func (m *MockWrapperCartServerInterface) UpdateCart(arg0 cart.RequestCartDefault, arg1 int) (*cart.ResponseCartErrors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCart", arg0, arg1)
	ret0, _ := ret[0].(*cart.ResponseCartErrors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockWrapperCartServerInterfaceMockRecorder) UpdateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockWrapperCartServerInterface)(nil).UpdateCart), arg0, arg1)
}

// MockConnectCartServiceInterface is a mock of ConnectCartServiceInterface interface.
type MockConnectCartServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConnectCartServiceInterfaceMockRecorder
}

// MockConnectCartServiceInterfaceMockRecorder is the mock recorder for MockConnectCartServiceInterface.
type MockConnectCartServiceInterfaceMockRecorder struct {
	mock *MockConnectCartServiceInterface
}

// NewMockConnectCartServiceInterface creates a new mock instance.
func NewMockConnectCartServiceInterface(ctrl *gomock.Controller) *MockConnectCartServiceInterface {
	mock := &MockConnectCartServiceInterface{ctrl: ctrl}
	mock.recorder = &MockConnectCartServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectCartServiceInterface) EXPECT() *MockConnectCartServiceInterfaceMockRecorder {
	return m.recorder
}

// GetCart mocks base method.
func (m *MockConnectCartServiceInterface) GetCart(arg0 context.Context, arg1 *proto.CartId, arg2 ...grpc.CallOption) (*proto.ResponseCartErrors, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCart", varargs...)
	ret0, _ := ret[0].(*proto.ResponseCartErrors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockConnectCartServiceInterfaceMockRecorder) GetCart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockConnectCartServiceInterface)(nil).GetCart), varargs...)
}

// UpdateCart mocks base method.
func (m *MockConnectCartServiceInterface) UpdateCart(arg0 context.Context, arg1 *proto.RequestCartDefault, arg2 ...grpc.CallOption) (*proto.ResponseCartErrors, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCart", varargs...)
	ret0, _ := ret[0].(*proto.ResponseCartErrors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCart indicates an expected call of UpdateCart.
func (mr *MockConnectCartServiceInterfaceMockRecorder) UpdateCart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCart", reflect.TypeOf((*MockConnectCartServiceInterface)(nil).UpdateCart), varargs...)
}

// MockConnectPromocodeServiceInterface is a mock of ConnectPromocodeServiceInterface interface.
type MockConnectPromocodeServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConnectPromocodeServiceInterfaceMockRecorder
}

// MockConnectPromocodeServiceInterfaceMockRecorder is the mock recorder for MockConnectPromocodeServiceInterface.
type MockConnectPromocodeServiceInterfaceMockRecorder struct {
	mock *MockConnectPromocodeServiceInterface
}

// NewMockConnectPromocodeServiceInterface creates a new mock instance.
func NewMockConnectPromocodeServiceInterface(ctrl *gomock.Controller) *MockConnectPromocodeServiceInterface {
	mock := &MockConnectPromocodeServiceInterface{ctrl: ctrl}
	mock.recorder = &MockConnectPromocodeServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectPromocodeServiceInterface) EXPECT() *MockConnectPromocodeServiceInterfaceMockRecorder {
	return m.recorder
}

// AddPromoCode mocks base method.
func (m *MockConnectPromocodeServiceInterface) AddPromoCode(arg0 context.Context, arg1 *proto0.PromoCodeWithRestaurantIdAndClient, arg2 ...grpc.CallOption) (*proto0.Error, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddPromoCode", varargs...)
	ret0, _ := ret[0].(*proto0.Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPromoCode indicates an expected call of AddPromoCode.
func (mr *MockConnectPromocodeServiceInterfaceMockRecorder) AddPromoCode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPromoCode", reflect.TypeOf((*MockConnectPromocodeServiceInterface)(nil).AddPromoCode), varargs...)
}
