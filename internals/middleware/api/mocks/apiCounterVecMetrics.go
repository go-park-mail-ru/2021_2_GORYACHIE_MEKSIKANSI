// Code generated by MockGen. DO NOT EDIT.
// Source: 2021_2_GORYACHIE_MEKSIKANSI/internals/middleware/api (interfaces: CounterVecMetricInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockCounterVecMetricInterface is a mock of CounterVecMetricInterface interface.
type MockCounterVecMetricInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCounterVecMetricInterfaceMockRecorder
}

// MockCounterVecMetricInterfaceMockRecorder is the mock recorder for MockCounterVecMetricInterface.
type MockCounterVecMetricInterfaceMockRecorder struct {
	mock *MockCounterVecMetricInterface
}

// NewMockCounterVecMetricInterface creates a new mock instance.
func NewMockCounterVecMetricInterface(ctrl *gomock.Controller) *MockCounterVecMetricInterface {
	mock := &MockCounterVecMetricInterface{ctrl: ctrl}
	mock.recorder = &MockCounterVecMetricInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterVecMetricInterface) EXPECT() *MockCounterVecMetricInterfaceMockRecorder {
	return m.recorder
}

// WithLabelValues mocks base method.
func (m *MockCounterVecMetricInterface) WithLabelValues(arg0 ...string) prometheus.Counter {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues.
func (mr *MockCounterVecMetricInterfaceMockRecorder) WithLabelValues(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*MockCounterVecMetricInterface)(nil).WithLabelValues), arg0...)
}
