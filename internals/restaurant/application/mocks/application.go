// Code generated by MockGen. DO NOT EDIT.
// Source: 2021_2_GORYACHIE_MEKSIKANSI/internals/restaurant/orm (interfaces: WrapperRestaurantServerInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	restaurant "2021_2_GORYACHIE_MEKSIKANSI/internals/restaurant"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWrapperRestaurantServerInterface is a mock of WrapperRestaurantServerInterface interface.
type MockWrapperRestaurantServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWrapperRestaurantServerInterfaceMockRecorder
}

// MockWrapperRestaurantServerInterfaceMockRecorder is the mock recorder for MockWrapperRestaurantServerInterface.
type MockWrapperRestaurantServerInterfaceMockRecorder struct {
	mock *MockWrapperRestaurantServerInterface
}

// NewMockWrapperRestaurantServerInterface creates a new mock instance.
func NewMockWrapperRestaurantServerInterface(ctrl *gomock.Controller) *MockWrapperRestaurantServerInterface {
	mock := &MockWrapperRestaurantServerInterface{ctrl: ctrl}
	mock.recorder = &MockWrapperRestaurantServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWrapperRestaurantServerInterface) EXPECT() *MockWrapperRestaurantServerInterfaceMockRecorder {
	return m.recorder
}

// AllRestaurants mocks base method.
func (m *MockWrapperRestaurantServerInterface) AllRestaurants() (*restaurant.AllRestaurantsPromo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRestaurants")
	ret0, _ := ret[0].(*restaurant.AllRestaurantsPromo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRestaurants indicates an expected call of AllRestaurants.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) AllRestaurants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRestaurants", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).AllRestaurants))
}

// CreateReview mocks base method.
func (m *MockWrapperRestaurantServerInterface) CreateReview(arg0 int, arg1 restaurant.NewReview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) CreateReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).CreateReview), arg0, arg1)
}

// DeleteDish mocks base method.
func (m *MockWrapperRestaurantServerInterface) DeleteDish(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDish indicates an expected call of DeleteDish.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) DeleteDish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDish", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).DeleteDish), arg0)
}

// EditRestaurantInFavorite mocks base method.
func (m *MockWrapperRestaurantServerInterface) EditRestaurantInFavorite(arg0, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditRestaurantInFavorite", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditRestaurantInFavorite indicates an expected call of EditRestaurantInFavorite.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) EditRestaurantInFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditRestaurantInFavorite", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).EditRestaurantInFavorite), arg0, arg1)
}

// GetFavoriteRestaurants mocks base method.
func (m *MockWrapperRestaurantServerInterface) GetFavoriteRestaurants(arg0 int) ([]restaurant.Restaurants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteRestaurants", arg0)
	ret0, _ := ret[0].([]restaurant.Restaurants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteRestaurants indicates an expected call of GetFavoriteRestaurants.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) GetFavoriteRestaurants(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteRestaurants", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).GetFavoriteRestaurants), arg0)
}

// GetRestaurant mocks base method.
func (m *MockWrapperRestaurantServerInterface) GetRestaurant(arg0, arg1 int) (*restaurant.RestaurantId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurant", arg0, arg1)
	ret0, _ := ret[0].(*restaurant.RestaurantId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurant indicates an expected call of GetRestaurant.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) GetRestaurant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurant", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).GetRestaurant), arg0, arg1)
}

// GetReview mocks base method.
func (m *MockWrapperRestaurantServerInterface) GetReview(arg0, arg1 int) (*restaurant.ResReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", arg0, arg1)
	ret0, _ := ret[0].(*restaurant.ResReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) GetReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).GetReview), arg0, arg1)
}

// RecommendedRestaurants mocks base method.
func (m *MockWrapperRestaurantServerInterface) RecommendedRestaurants() (*restaurant.AllRestaurants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecommendedRestaurants")
	ret0, _ := ret[0].(*restaurant.AllRestaurants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecommendedRestaurants indicates an expected call of RecommendedRestaurants.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) RecommendedRestaurants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendedRestaurants", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).RecommendedRestaurants))
}

// RestaurantDishes mocks base method.
func (m *MockWrapperRestaurantServerInterface) RestaurantDishes(arg0, arg1 int) (*restaurant.Dishes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestaurantDishes", arg0, arg1)
	ret0, _ := ret[0].(*restaurant.Dishes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestaurantDishes indicates an expected call of RestaurantDishes.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) RestaurantDishes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestaurantDishes", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).RestaurantDishes), arg0, arg1)
}

// SearchRestaurant mocks base method.
func (m *MockWrapperRestaurantServerInterface) SearchRestaurant(arg0 string) ([]restaurant.Restaurants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRestaurant", arg0)
	ret0, _ := ret[0].([]restaurant.Restaurants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRestaurant indicates an expected call of SearchRestaurant.
func (mr *MockWrapperRestaurantServerInterfaceMockRecorder) SearchRestaurant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRestaurant", reflect.TypeOf((*MockWrapperRestaurantServerInterface)(nil).SearchRestaurant), arg0)
}
