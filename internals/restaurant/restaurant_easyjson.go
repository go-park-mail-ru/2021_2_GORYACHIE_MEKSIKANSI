// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package restaurant

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant(in *jlexer.Lexer, out *ResFavouriteNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant(out *jwriter.Writer, in ResFavouriteNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResFavouriteNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResFavouriteNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant(l, v)
}
func easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant1(in *jlexer.Lexer, out *NewReview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "restaurant":
			easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant2(in, &out.Restaurant)
		case "text":
			out.Text = string(in.String())
		case "rate":
			out.Rate = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant1(out *jwriter.Writer, in NewReview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"restaurant\":"
		out.RawString(prefix[1:])
		easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant2(out, in.Restaurant)
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"rate\":"
		out.RawString(prefix)
		out.Int(int(in.Rate))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewReview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewReview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant1(l, v)
}
func easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant2(in *jlexer.Lexer, out *RestaurantId) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "img":
			out.Img = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "costFFD":
			out.CostForFreeDelivery = int(in.Int())
		case "minDTime":
			out.MinDelivery = int(in.Int())
		case "maxDTime":
			out.MaxDelivery = int(in.Int())
		case "rating":
			out.Rating = float32(in.Float32())
		case "favourite":
			out.Favourite = bool(in.Bool())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]Tag, 0, 2)
					} else {
						out.Tags = []Tag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Tag
					easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant3(in, &v1)
					out.Tags = append(out.Tags, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "menu":
			if in.IsNull() {
				in.Skip()
				out.Menu = nil
			} else {
				in.Delim('[')
				if out.Menu == nil {
					if !in.IsDelim(']') {
						out.Menu = make([]Menu, 0, 1)
					} else {
						out.Menu = []Menu{}
					}
				} else {
					out.Menu = (out.Menu)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Menu
					easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant4(in, &v2)
					out.Menu = append(out.Menu, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant2(out *jwriter.Writer, in RestaurantId) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"img\":"
		out.RawString(prefix)
		out.String(string(in.Img))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"costFFD\":"
		out.RawString(prefix)
		out.Int(int(in.CostForFreeDelivery))
	}
	{
		const prefix string = ",\"minDTime\":"
		out.RawString(prefix)
		out.Int(int(in.MinDelivery))
	}
	{
		const prefix string = ",\"maxDTime\":"
		out.RawString(prefix)
		out.Int(int(in.MaxDelivery))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rating))
	}
	{
		const prefix string = ",\"favourite\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favourite))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Tags {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant3(out, v4)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"menu\":"
		out.RawString(prefix)
		if in.Menu == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Menu {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant4(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant4(in *jlexer.Lexer, out *Menu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "dishes":
			if in.IsNull() {
				in.Skip()
				out.DishesMenu = nil
			} else {
				in.Delim('[')
				if out.DishesMenu == nil {
					if !in.IsDelim(']') {
						out.DishesMenu = make([]DishesMenu, 0, 1)
					} else {
						out.DishesMenu = []DishesMenu{}
					}
				} else {
					out.DishesMenu = (out.DishesMenu)[:0]
				}
				for !in.IsDelim(']') {
					var v7 DishesMenu
					easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant5(in, &v7)
					out.DishesMenu = append(out.DishesMenu, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant4(out *jwriter.Writer, in Menu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"dishes\":"
		out.RawString(prefix)
		if in.DishesMenu == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.DishesMenu {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant5(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant5(in *jlexer.Lexer, out *DishesMenu) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "cost":
			out.Cost = int(in.Int())
		case "ccal":
			out.Kilocalorie = int(in.Int())
		case "img":
			out.Img = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant5(out *jwriter.Writer, in DishesMenu) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"cost\":"
		out.RawString(prefix)
		out.Int(int(in.Cost))
	}
	{
		const prefix string = ",\"ccal\":"
		out.RawString(prefix)
		out.Int(int(in.Kilocalorie))
	}
	{
		const prefix string = ",\"img\":"
		out.RawString(prefix)
		out.String(string(in.Img))
	}
	out.RawByte('}')
}
func easyjson16134a91Decode20212GORYACHIEMEKSIKANSIInternalsRestaurant3(in *jlexer.Lexer, out *Tag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson16134a91Encode20212GORYACHIEMEKSIKANSIInternalsRestaurant3(out *jwriter.Writer, in Tag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
